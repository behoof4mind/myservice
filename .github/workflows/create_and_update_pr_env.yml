on:
  pull_request:
    types: [reopened, opened, synchronize, edited]

name: Create PR Env
jobs:
  create_or_update_pr_env:
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_DEFAULT_REGION: ${{ secrets.AWS_DEFAULT_REGION }}
      BRANCH_NAME: ${{ github.head_ref }}
    steps:
      - uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 0.14.8
      - uses: actions/checkout@v2
      - name: Checkout
        uses: actions/checkout@v1
#      - name: Set up QEMU
#        uses: docker/setup-qemu-action@v1
#      - name: Set up Docker Buildx
#        uses: docker/setup-buildx-action@v1
#      - name: Login to DockerHub
#        uses: docker/login-action@v1
#        with:
#          username: ${{ secrets.DOCKERHUB_USERNAME }}
#          password: ${{ secrets.DOCKERHUB_TOKEN }}
#      - name: Build and push
#        id: docker_build
#        uses: docker/build-push-action@v2
#        with:
#          push: true
#          tags: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}:test
#      - name: Image digest
#        run: echo ${{ steps.docker_build.outputs.digest }}
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        working-directory: ./terraform
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init -backend-config="bucket=terraform-my-service-state" -backend-config="key=terraform-test.tfstate" -backend-config="dynamodb_table=terraform-my-service-state-test" -backend-config="encrypt=true"
        working-directory: ./terraform
      - name: Setup Terraform variables
        working-directory: ./terraform
        id: vars
        run: |-
          cat > pipeline.auto.tfvars <<EOF
          env_prefix="test"
          is_temp_env=true
          max_ec2_instances=1
          min_ec2_instances=1
          EOF
      - name: Terraform Plan
        id: plan
        run: terraform plan -out tf.plan
        working-directory: ./terraform
      - name: Terraform Apply
        id: apply
        run: terraform apply tf.plan
        working-directory: ./terraform
      - uses: actions/github-script@0.9.0
        env:
          PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
          APPLY: "terraform\n${{ steps.apply.outputs.stdout }}"
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const output = `#### Terraform Format and Style 🖌\`${{ steps.fmt.outcome }}\`
            #### Terraform Initialization ⚙️\`${{ steps.init.outcome }}\`
            #### Terraform Validation 🤖${{ steps.validate.outputs.stdout }}
            #### Terraform Plan 📖\`${{ steps.plan.outcome }}\`
            #### Myservice URL: \`${{ steps.apply.outputs.myservice_lb }}\`

            <details><summary>Show Plan</summary>

            \`\`\`${process.env.PLAN}\`\`\`

            </details>

            *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`, Working Directory: \`${{ env.tf_actions_working_dir }}\`, Workflow: \`${{ github.workflow }}\`*`;

            github.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: output
            })



#      - name: Terraform Plan
#        uses: hashicorp/setup-terraform@v1
#        with:
#          terraform_version: 0.14.8
#          tf_actions_subcommand: 'plan'
#          tf_actions_working_dir: './terraform'
#          args: '-out tf.plan'
#        env:
#         TF_VAR_env_prefix: test
#         TF_VAR_is_temp_env: true
#         TF_VAR_max_ec2_instances: 1
#         TF_VAR_min_ec2_instances: 1
#         TF_VAR_mysql_username: root
#         TF_VAR_mysql_password: ${{ secrets.DB_PASSWORD }}
#      - name: Terraform Apply
#        uses: hashicorp/setup-terraform@v1
#        with:
#          terraform_version: 0.14.8
#          tf_actions_subcommand: 'apply'
#          tf_actions_working_dir: './terraform'
#          args: 'tf.plan'
#      - name: Terraform Output
#        id: terraform
#        uses: hashicorp/setup-terraform@v1
#        with:
#          terraform_version: 0.14.8
#          tf_actions_subcommand: 'output'
#          tf_actions_working_dir: './terraform'
#          args: 'website'
#      - name: "Welcome"
#        description: "A basic welcome action"
#        author: "GitHub"
#        inputs:
#          welcome-message:
#            description: "Message to display when a user opens an issue or PR"
#            default: "Thanks for opening an issue! Make sure you've followed CONTRIBUTING.md"
#          repo-token:
#            description: "Token for the repo. Can be passed in using {{ secrets.GITHUB_TOKEN }}"
#            required: true
#        runs:
#          using: "node12"
#          main: "lib/main.js"
#      - run: node .github/actions/comment.js
#        env:
#          github_token: ${{ secrets.GITHUB_TOKEN }}
#          issue_number: ${{ github.event.pull_request.number }}
#          repo: ${{ github.event.repository.name }}
#          owner: ${{ github.repository_owner }}
#          website_link: ${{ steps.terraform.outputs.tf_actions_output }}
#      - name: Call terraform output
#        working-directory: ./terraform
#        run: |
#          output=$(terraform output myservice_lb)
#          echo $output
#          echo "myservice_url=${output}" >> $GITHUB_ENV
#      - uses: mshick/add-pr-comment@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          message: |
#            **Hi, seems like your build finished well. Check myservice here ${{ env.myservice_url }} **
#          allow-repeats: true